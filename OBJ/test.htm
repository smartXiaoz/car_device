<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Jun 02 12:20:50 2020
<BR><P>
<H3>Maximum Stack Usage =        392 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
uart_task &rArr; uart_process &rArr; Test_CMDProcess &rArr; Test_CMD09 &rArr; Test_respond &rArr; Write_sendcache
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[95]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from can.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">CMD_8201</a> from uartexp.o(i.CMD_8201) referenced from uartexp.o(i.CMD_0202)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">InPutScan_task</a> from inputscantask.o(i.InPutScan_task) referenced from inputscantask.o(i.InPutScanTASK_Create)
 <LI><a href="#[53]">KEYCallback</a> from softimers.o(i.KEYCallback) referenced from softimers.o(i.TimersCreate)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">Process_task</a> from uartexptask.o(i.Process_task) referenced from uartexptask.o(i.ProcessTASK_Create)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from can.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4b]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[4f]">can_task</a> from cantask.o(i.can_task) referenced from cantask.o(i.CanTASK_Create)
 <LI><a href="#[4d]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[52]">null</a> from uartexp.o(i.null) referenced from uartexp.o(i.TX_Process)
 <LI><a href="#[55]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[5a]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[58]">prvUDS_IDLETask</a> from tasks.o(i.prvUDS_IDLETask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[54]">start_task</a> from test.o(i.start_task) referenced from test.o(i.main)
 <LI><a href="#[56]">uart_task</a> from uarttask.o(i.uart_task) referenced from uarttask.o(i.uartTASK_Create)
 <LI><a href="#[57]">uds_task</a> from udstask.o(i.uds_task) referenced from udstask.o(i.udsTASK_Create)
 <LI><a href="#[59]">wakeup_task</a> from wakeuptask.o(i.wakeup_task) referenced from wakeuptask.o(i.wakeupTASK_Create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[26f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[270]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[271]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[272]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[273]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[81]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[61]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[63]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[65]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[274]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[6e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[275]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[276]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[67]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[277]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[278]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[279]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[27a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[27b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[27c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[69]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[27d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[27e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[27f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[280]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[281]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[282]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[283]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[284]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[285]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[286]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[287]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[288]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[289]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[73]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[28a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[28b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[28c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[28d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[28e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[28f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[5d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[290]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[291]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[292]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[96]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[72]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[293]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[74]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[253]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[294]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[295]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batctrl_log
</UL>

<P><STRONG><a name="[79]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
</UL>

<P><STRONG><a name="[7c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[7d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[7b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[62]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[64]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[296]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[fc]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8661
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8660
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8108
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8000
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD09
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_sendcache
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_sendcache
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[82]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[297]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0670
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[298]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6886_GetSta
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FRQSet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FMSeek
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[29d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2a2]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[7a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[90]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[66]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[78]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2a3]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[85]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[68]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[8b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8e]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[87]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[91]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2a4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2a5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[71]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[259]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[88]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[97]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[99]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[9a]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[89]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8a]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9b]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[9c]"></a>ACCEXT_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, exti.o(i.ACCEXT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ACCEXT_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[20c]"></a>ACK_Clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uartexp.o(i.ACK_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_TXtask
</UL>

<P><STRONG><a name="[a1]"></a>ACK_Process</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, uartexp.o(i.ACK_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACK_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[1a7]"></a>ACK_READ</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uartexp.o(i.ACK_READ))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Process
</UL>

<P><STRONG><a name="[a0]"></a>ACK_Write</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uartexp.o(i.ACK_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACK_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_Load
</UL>

<P><STRONG><a name="[b6]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[f5]"></a>APP2CAN_Write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cantask.o(i.APP2CAN_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP2CAN_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0650
</UL>

<P><STRONG><a name="[a3]"></a>APP_INT</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app.o(i.APP_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = APP_INT &rArr; wakeupTASK_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupTASK_Create
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udsTASK_Create
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTASK_Create
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTASK_Create
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutScanTASK_Create
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTASK_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[aa]"></a>AT24CXX_Check</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, 24cxx.o(i.AT24CXX_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AT24CXX_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC1_Read_Byte &rArr; IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_MPU
</UL>

<P><STRONG><a name="[ab]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC1_Read_Byte &rArr; IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Wait_Ack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_MPU
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0610
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Check
</UL>

<P><STRONG><a name="[ac]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC1_Wait_Ack &rArr; IIC1_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Wait_Ack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[b3]"></a>Adc_Init</STRONG> (Thumb, 566 bytes, Stack size 8 bytes, adc.o(i.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Adc_Init &rArr; DMA_Config &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_ENABLE
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
</UL>

<P><STRONG><a name="[d4]"></a>Astern_Ctrl</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, output.o(i.Astern_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
</UL>

<P><STRONG><a name="[b7]"></a>BUS_OFF2</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, cantask.o(i.BUS_OFF2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BUS_OFF2 &rArr; TX_Vsorce &rArr; CAN_Send_Msg &rArr; CAN_Tx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SENGSTOP
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Mode_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Vsorce
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
</UL>

<P><STRONG><a name="[202]"></a>CAL_3700_CONF_WRITE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 24cxx.o(i.CAL_3700_CONF_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_WriteDataByIdentifier
</UL>

<P><STRONG><a name="[1ff]"></a>CAL_F184_CONF_WRITE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 24cxx.o(i.CAL_F184_CONF_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_WriteDataByIdentifier
</UL>

<P><STRONG><a name="[200]"></a>CAL_F190_CONF_WRITE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 24cxx.o(i.CAL_F190_CONF_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_WriteDataByIdentifier
</UL>

<P><STRONG><a name="[201]"></a>CAL_F1A3_CONF_WRITE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 24cxx.o(i.CAL_F1A3_CONF_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_WriteDataByIdentifier
</UL>

<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, can.o(i.CAN1_SCE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>CAN_EXP</STRONG> (Thumb, 602 bytes, Stack size 32 bytes, cantask.o(i.CAN_EXP))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CAN_EXP &rArr; CanIf_Received &rArr; CanTp_Process &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLight_Get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSTS_Get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_Get5
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_Get4
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_Get3
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_Get2
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_Get1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Received
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8651
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8631
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
</UL>

<P><STRONG><a name="[b9]"></a>CAN_Mode_Init</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, can.o(i.CAN_Mode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_Mode_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DINT_CAN
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_OFF2
</UL>

<P><STRONG><a name="[194]"></a>CAN_RXclean</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can.o(i.CAN_RXclean))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[1d0]"></a>CAN_Rx_Msg</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, can.o(i.CAN_Rx_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_Rx_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>CAN_SENGSTOP</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, can.o(i.CAN_SENGSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_OFF2
</UL>

<P><STRONG><a name="[cc]"></a>CAN_Send_Msg</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, can.o(i.CAN_Send_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_Send_Msg &rArr; CAN_Tx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Staus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Vsorce
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_RTCtime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_PHONEinfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_BLUEinfo
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU2CAN_Process
</UL>

<P><STRONG><a name="[cd]"></a>CAN_Tx_Msg</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, can.o(i.CAN_Tx_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_Tx_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>

<P><STRONG><a name="[ce]"></a>CAN_Tx_Staus</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, can.o(i.CAN_Tx_Staus))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>

<P><STRONG><a name="[cf]"></a>CARInf_Process</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, inputscantask.o(i.CARInf_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CARInf_Process &rArr; CMD_8103 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_82
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTC_process
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TXSTA
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8201
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8103
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8101
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Astern_Ctrl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_car
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_car
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutProcess
</UL>

<P><STRONG><a name="[e6]"></a>CMD_0500</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uartexp.o(i.CMD_0500))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_0500 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_explain
</UL>

<P><STRONG><a name="[e8]"></a>CMD_0501</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, uartexp.o(i.CMD_0501))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CMD_0501 &rArr; IAP_write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cl_upcnt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskCancel
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8502
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_explain
</UL>

<P><STRONG><a name="[ec]"></a>CMD_0600</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uartexp.o(i.CMD_0600))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_0600 &rArr; CMD_8600 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8600
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[ee]"></a>CMD_0610</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uartexp.o(i.CMD_0610))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CMD_0610 &rArr; AT24CXX_ReadOneByte &rArr; IIC1_Read_Byte &rArr; IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8610
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[210]"></a>CMD_0620</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, uartexp.o(i.CMD_0620))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[f0]"></a>CMD_0630</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uartexp.o(i.CMD_0630))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMD_0630 &rArr; MPU2CAN_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU2CAN_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[f2]"></a>CMD_0640</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, uartexp.o(i.CMD_0640))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CMD_0640 &rArr; LA_CMD_83 &rArr; LA_TX_TaskADD &rArr; LA_CheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_83
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[f4]"></a>CMD_0650</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uartexp.o(i.CMD_0650))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMD_0650 &rArr; APP2CAN_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP2CAN_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[f6]"></a>CMD_0670</STRONG> (Thumb, 70 bytes, Stack size 256 bytes, uartexp.o(i.CMD_0670))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CMD_0670 &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_sendcache
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[f8]"></a>CMD_0680</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uartexp.o(i.CMD_0680))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_0680
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW2836_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[fd]"></a>CMD_8003</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8003))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8003 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Work
</UL>

<P><STRONG><a name="[ff]"></a>CMD_800A</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartexp.o(i.CMD_800A))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_800A &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_warn
</UL>

<P><STRONG><a name="[100]"></a>CMD_8100</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8100))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8100 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_task
</UL>

<P><STRONG><a name="[d0]"></a>CMD_8101</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8101))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8101 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8000
</UL>

<P><STRONG><a name="[101]"></a>CMD_8102</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8102))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8102 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Process
</UL>

<P><STRONG><a name="[d7]"></a>CMD_8103</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8103))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8103 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
</UL>

<P><STRONG><a name="[e0]"></a>CMD_8105</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8105))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8105 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0105
</UL>

<P><STRONG><a name="[102]"></a>CMD_8108</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8108))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8108 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_explain
</UL>

<P><STRONG><a name="[103]"></a>CMD_810A</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartexp.o(i.CMD_810A))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_810A &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_explain
</UL>

<P><STRONG><a name="[104]"></a>CMD_8200</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8200))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8200 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_explain
</UL>

<P><STRONG><a name="[4e]"></a>CMD_8201</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8201))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8201 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_explain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartexp.o(i.CMD_0202)
</UL>
<P><STRONG><a name="[e5]"></a>CMD_8301</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8301))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8301 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0302
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Scan
</UL>

<P><STRONG><a name="[105]"></a>CMD_8501</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8501))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8501 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[eb]"></a>CMD_8502</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8502))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8502 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0501
</UL>

<P><STRONG><a name="[106]"></a>CMD_8503</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8503))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8503 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[ed]"></a>CMD_8600</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8600))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8600 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0600
</UL>

<P><STRONG><a name="[ef]"></a>CMD_8610</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8610))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8610 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0610
</UL>

<P><STRONG><a name="[107]"></a>CMD_8621</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8621))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8621 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[108]"></a>CMD_8622</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8622))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8622 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[109]"></a>CMD_8623</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8623))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8623 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[10a]"></a>CMD_8630</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8630))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8630 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU2CAN_Process
</UL>

<P><STRONG><a name="[bf]"></a>CMD_8631</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8631))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8631 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[10b]"></a>CMD_8640</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8640))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8640 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_03
</UL>

<P><STRONG><a name="[10c]"></a>CMD_8650</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8650))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8650 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU2CAN_Process
</UL>

<P><STRONG><a name="[ca]"></a>CMD_8651</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8651))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8651 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[10d]"></a>CMD_8660</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8660))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8660 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[10e]"></a>CMD_8661</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8661))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8661 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
</UL>

<P><STRONG><a name="[10f]"></a>CMD_8670</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8670))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CMD_8670 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>

<P><STRONG><a name="[110]"></a>CMD_8680</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8680))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8680 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_task
</UL>

<P><STRONG><a name="[c9]"></a>CanIf_Received</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, uds_can_driver.o(i.CanIf_Received))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CanIf_Received &rArr; CanTp_Process &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[112]"></a>CanIf_Transmit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uds_can_driver.o(i.CanIf_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Write_TXMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_Report
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirmation
</UL>

<P><STRONG><a name="[121]"></a>CanIf_TxConfirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uds_can_driver.o(i.CanIf_TxConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirmation
</UL>

<P><STRONG><a name="[113]"></a>CanIf_TxIndication</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uds_can_driver.o(i.CanIf_TxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Transmit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Process
</UL>

<P><STRONG><a name="[a4]"></a>CanTASK_Create</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cantask.o(i.CanTASK_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CanTASK_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_INT
</UL>

<P><STRONG><a name="[24b]"></a>CanTp_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cantp.o(i.CanTp_Init))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[11a]"></a>CanTp_MainTask</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cantp.o(i.CanTp_MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CanTp_MainTask &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpTxConfirmation
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_Report
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[111]"></a>CanTp_Process</STRONG> (Thumb, 942 bytes, Stack size 40 bytes, cantp.o(i.CanTp_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CanTp_Process &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpTxConfirmation
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpRxIndication
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpProvideRxBuffer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_Report
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_TxIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Received
</UL>

<P><STRONG><a name="[120]"></a>CanTp_Transmit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cantp.o(i.CanTp_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_TxIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
</UL>

<P><STRONG><a name="[114]"></a>CanTp_TxConfirmation</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, cantp.o(i.CanTp_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpTxConfirmation
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_Report
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_TxConfirm
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_MainTask
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_TxIndication
</UL>

<P><STRONG><a name="[123]"></a>Can_Get_RXMsg</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, can.o(i.Can_Get_RXMsg))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
</UL>

<P><STRONG><a name="[124]"></a>Can_Get_TXMsg</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, can.o(i.Can_Get_TXMsg))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
</UL>

<P><STRONG><a name="[1d1]"></a>Can_Write_RXMsg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, can.o(i.Can_Write_RXMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Can_Write_RXMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>Can_Write_TXMsg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, can.o(i.Can_Write_TXMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Can_Write_TXMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0202
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
</UL>

<P><STRONG><a name="[d5]"></a>Check_TXSTA</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uartexp.o(i.Check_TXSTA))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Process
</UL>

<P><STRONG><a name="[1f9]"></a>CommunicationType_Disable_Rx_Tx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uds_interface.o(i.CommunicationType_Disable_Rx_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CommunicationControl
</UL>

<P><STRONG><a name="[1f8]"></a>CommunicationType_Enable_Rx_Disable_Tx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uds_interface.o(i.CommunicationType_Enable_Rx_Disable_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CommunicationControl
</UL>

<P><STRONG><a name="[1f7]"></a>CommunicationType_Enable_Rx_Tx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uds_interface.o(i.CommunicationType_Enable_Rx_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_DiagnosticSessionControlPreCheck
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CommunicationControl
</UL>

<P><STRONG><a name="[129]"></a>ComputeKey</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uds_interface.o(i.ComputeKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComputeKey
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeKey1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CompareKey
</UL>

<P><STRONG><a name="[12a]"></a>ComputeKey1</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uds_interface.o(i.ComputeKey1))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeKey
</UL>

<P><STRONG><a name="[12b]"></a>DEBUG_Printf</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, uarttask.o(i.DEBUG_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DEBUG_Printf &rArr; batctrl_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batctrl_log
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDFC
</UL>

<P><STRONG><a name="[204]"></a>DID_VersionSet</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, uds_interface.o(i.DID_VersionSet))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
</UL>

<P><STRONG><a name="[cb]"></a>DINT_CAN</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, can.o(i.DINT_CAN))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Mode_Init
</UL>

<P><STRONG><a name="[b4]"></a>DMA_Config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dma.o(i.DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA_Config &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[b5]"></a>DMA_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dma.o(i.DMA_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[131]"></a>DTC_Clean</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dtc.o(i.DTC_Clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DTC_Clean &rArr; SaveHistoryDtc
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryDtc
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTC_process
</UL>

<P><STRONG><a name="[24a]"></a>DTC_Happen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cantask.o(i.DTC_Happen))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_dtc_check
</UL>

<P><STRONG><a name="[d2]"></a>DTC_process</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cantask.o(i.DTC_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DTC_process &rArr; DTC_Clean &rArr; SaveHistoryDtc
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTC_Clean
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
</UL>

<P><STRONG><a name="[133]"></a>Data_Save</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, 24cxx.o(i.Data_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Data_Save &rArr; AT24CXX_WriteOneByte &rArr; IIC1_Wait_Ack &rArr; IIC1_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[134]"></a>Data_read</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, 24cxx.o(i.Data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Data_read &rArr; AT24CXX_ReadOneByte &rArr; IIC1_Read_Byte &rArr; IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_MPU
</UL>

<P><STRONG><a name="[11d]"></a>Det_Report</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, det.o(i.Det_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_MainTask
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetServiceTable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirmation
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Process
</UL>

<P><STRONG><a name="[139]"></a>EEPROM_Check</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testcmd.o(i.EEPROM_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EEPROM_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC1_Read_Byte &rArr; IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD08
</UL>

<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>EXTIX_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, exti.o(i.EXTIX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTIX_Init &rArr; ACCEXT_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEXT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Dormancy
</UL>

<P><STRONG><a name="[9d]"></a>Ex_NVIC_Config</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sys.o(i.Ex_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEXT_Init
</UL>

<P><STRONG><a name="[20a]"></a>FAULT_Process</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, cantask.o(i.FAULT_Process))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_task
</UL>

<P><STRONG><a name="[13b]"></a>I2C2_ReadData</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, i2c.o(i.I2C2_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6886_GetSta
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FRQSet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FMSeek
</UL>

<P><STRONG><a name="[141]"></a>I2C2_WriteData</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, i2c.o(i.I2C2_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C2_WriteData &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6886_GetSta
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Mute
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FRQSet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FMSeek
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_Write
</UL>

<P><STRONG><a name="[ea]"></a>IAP_write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stmflash.o(i.IAP_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IAP_write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0501
</UL>

<P><STRONG><a name="[146]"></a>IIC1_Ack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, i2c.o(i.IIC1_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC1_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Read_Byte
</UL>

<P><STRONG><a name="[208]"></a>IIC1_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, i2c.o(i.IIC1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
</UL>

<P><STRONG><a name="[148]"></a>IIC1_NAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, i2c.o(i.IIC1_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Read_Byte
</UL>

<P><STRONG><a name="[b0]"></a>IIC1_Read_Byte</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, i2c.o(i.IIC1_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC1_Read_Byte &rArr; IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_NAck
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[ae]"></a>IIC1_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, i2c.o(i.IIC1_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC1_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[ad]"></a>IIC1_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i.IIC1_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC1_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[b1]"></a>IIC1_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c.o(i.IIC1_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC1_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Wait_Ack
</UL>

<P><STRONG><a name="[af]"></a>IIC1_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, i2c.o(i.IIC1_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC1_Wait_Ack &rArr; IIC1_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[149]"></a>IIC2_Ack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, i2c.o(i.IIC2_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC2_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Read_Byte
</UL>

<P><STRONG><a name="[209]"></a>IIC2_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, i2c.o(i.IIC2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
</UL>

<P><STRONG><a name="[14a]"></a>IIC2_NAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, i2c.o(i.IIC2_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Read_Byte
</UL>

<P><STRONG><a name="[13f]"></a>IIC2_Read_Byte</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, i2c.o(i.IIC2_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_NAck
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
</UL>

<P><STRONG><a name="[13d]"></a>IIC2_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, i2c.o(i.IIC2_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC2_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
</UL>

<P><STRONG><a name="[13c]"></a>IIC2_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i.IIC2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC2_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
</UL>

<P><STRONG><a name="[140]"></a>IIC2_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c.o(i.IIC2_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC2_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Wait_Ack
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
</UL>

<P><STRONG><a name="[13e]"></a>IIC2_Wait_Ack</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, i2c.o(i.IIC2_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
</UL>

<P><STRONG><a name="[196]"></a>IWDG_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys.o(i.IWDG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_EcuReset
</UL>

<P><STRONG><a name="[a8]"></a>InPutScanTASK_Create</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, inputscantask.o(i.InPutScanTASK_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = InPutScanTASK_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_INT
</UL>

<P><STRONG><a name="[213]"></a>InPut_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, input.o(i.InPut_Init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>InPut_Scan</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, input.o(i.InPut_Scan))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutProcess
</UL>

<P><STRONG><a name="[176]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[211]"></a>JTAG_Set</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sys.o(i.JTAG_Set))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>KEYCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, softimers.o(i.KEYCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEYCallback &rArr; KEY_Get &rArr; KEY_SCAN &rArr; getchvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softimers.o(i.TimersCreate)
</UL>
<P><STRONG><a name="[153]"></a>KEY_Get</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, adc.o(i.KEY_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEY_Get &rArr; KEY_SCAN &rArr; getchvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writ_KEY
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SCAN
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYCallback
</UL>

<P><STRONG><a name="[156]"></a>KEY_Process</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uartexp.o(i.KEY_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = KEY_Process &rArr; Test_keysend &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TXSTA
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_KEYvalue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_keysend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_KEY
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8102
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Process
</UL>

<P><STRONG><a name="[154]"></a>KEY_SCAN</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, adc.o(i.KEY_SCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY_SCAN &rArr; getchvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getchvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Get
</UL>

<P><STRONG><a name="[15b]"></a>LA_ACK_Process</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, laroundexp.o(i.LA_ACK_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LA_ACK_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_TX_TaskCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_UART_explain
</UL>

<P><STRONG><a name="[160]"></a>LA_CMD_81</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, laroundexp.o(i.LA_CMD_81))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LA_CMD_81 &rArr; LA_TX_TaskADD &rArr; LA_CheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_task
</UL>

<P><STRONG><a name="[d3]"></a>LA_CMD_82</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, laroundexp.o(i.LA_CMD_82))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LA_CMD_82 &rArr; LA_TX_TaskADD &rArr; LA_CheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0104
</UL>

<P><STRONG><a name="[f3]"></a>LA_CMD_83</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, laroundexp.o(i.LA_CMD_83))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LA_CMD_83 &rArr; LA_TX_TaskADD &rArr; LA_CheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0640
</UL>

<P><STRONG><a name="[161]"></a>LA_TX_Process</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, laroundexp.o(i.LA_TX_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LA_TX_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_TxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_task
</UL>

<P><STRONG><a name="[15e]"></a>LA_TX_TaskADD</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, laroundexp.o(i.LA_TX_TaskADD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LA_TX_TaskADD &rArr; LA_CheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CheckSun_load
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_81
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_82
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_00
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_83
</UL>

<P><STRONG><a name="[15c]"></a>LA_TX_TaskCancel</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, laroundexp.o(i.LA_TX_TaskCancel))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_ACK_Process
</UL>

<P><STRONG><a name="[164]"></a>LA_UART_explain</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, laroundexp.o(i.LA_UART_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LA_UART_explain &rArr; LA_CMD_03 &rArr; CMD_8640 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cl_ladtc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_ACK_Process
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_03
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_00
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_ACK_Load
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_process
</UL>

<P><STRONG><a name="[df]"></a>LowPow_warn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wakeuptask.o(i.LowPow_warn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LowPow_warn &rArr; CMD_800A &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_800A
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0105
</UL>

<P><STRONG><a name="[167]"></a>MPU2CAN_Process</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cantask.o(i.MPU2CAN_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MPU2CAN_Process &rArr; CMD_8650 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8650
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8630
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU2CAN_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_task
</UL>

<P><STRONG><a name="[168]"></a>MPU2CAN_Read</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, cantask.o(i.MPU2CAN_Read))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU2CAN_Process
</UL>

<P><STRONG><a name="[f1]"></a>MPU2CAN_Write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cantask.o(i.MPU2CAN_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MPU2CAN_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0630
</UL>

<P><STRONG><a name="[169]"></a>MYRCC_DeInit</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, sys.o(i.MYRCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MYRCC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[9e]"></a>MY_NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sys.o(i.MY_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Mode_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEXT_Init
</UL>

<P><STRONG><a name="[16b]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.MY_NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[16a]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(i.MY_NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[193]"></a>OUT_DISABLE</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, output.o(i.OUT_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[16c]"></a>OUT_ENABLE</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, output.o(i.OUT_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUT_ENABLE &rArr; Adc_Init &rArr; DMA_Config &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[212]"></a>OutPut_Init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, output.o(i.OutPut_Init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>POWER_GET</STRONG> (Thumb, 484 bytes, Stack size 80 bytes, inputscantask.o(i.POWER_GET))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = POWER_GET &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbattervalue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutProcess
</UL>

<P><STRONG><a name="[a7]"></a>ProcessTASK_Create</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, uartexptask.o(i.ProcessTASK_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ProcessTASK_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_INT
</UL>

<P><STRONG><a name="[190]"></a>RCC_HSEConfig</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, sys.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Dormancy
</UL>

<P><STRONG><a name="[17b]"></a>RDS_Clean</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio.o(i.RDS_Clean))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[fb]"></a>RTC_Get</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8000
</UL>

<P><STRONG><a name="[177]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCcn_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>RTC_Init4</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, rtc.o(i.RTC_Init4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_Init4 &rArr; RTC_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
</UL>

<P><STRONG><a name="[14c]"></a>RTC_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, inputscantask.o(i.RTC_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Process &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutProcess
</UL>

<P><STRONG><a name="[d9]"></a>RTC_Set</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0006
</UL>

<P><STRONG><a name="[178]"></a>RTCcn_Get</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtc.o(i.RTCcn_Get))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>Radio_Process</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, radio.o(i.Radio_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Radio_Process &rArr; TEF6686_Start &rArr; TEF6686_TuneTo &rArr; TEF6686_FRQSet &rArr; TEF6686_FMSeek &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8623
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8622
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8621
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8301
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6886_GetSta
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_TuneTo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Scan
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Mute
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Clean
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutProcess
</UL>

<P><STRONG><a name="[158]"></a>Read_KEY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.Read_KEY))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Process
</UL>

<P><STRONG><a name="[d6]"></a>Read_car</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, inputscantask.o(i.Read_car))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
</UL>

<P><STRONG><a name="[184]"></a>Read_sendcache</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, testcmd.o(i.Read_sendcache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_sendProcess
</UL>

<P><STRONG><a name="[186]"></a>Rest_MPU</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, wakeuptask.o(i.Rest_MPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Rest_MPU &rArr; Data_read &rArr; AT24CXX_ReadOneByte &rArr; IIC1_Read_Byte &rArr; IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_TXtask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Work
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[143]"></a>STMFLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stmflash.o(i.STMFLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STMFLASH_ErasePage &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[18b]"></a>STMFLASH_GetStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stmflash.o(i.STMFLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>

<P><STRONG><a name="[145]"></a>STMFLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stmflash.o(i.STMFLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[189]"></a>STMFLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stmflash.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>STMFLASH_ReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(i.STMFLASH_ReadHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>

<P><STRONG><a name="[142]"></a>STMFLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stmflash.o(i.STMFLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[188]"></a>STMFLASH_WaitDone</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stmflash.o(i.STMFLASH_WaitDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_GetStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
</UL>

<P><STRONG><a name="[18c]"></a>STMFLASH_Write</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, stmflash.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>STMFLASH_WriteHalfWord</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stmflash.o(i.STMFLASH_WriteHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[144]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stmflash.o(i.STMFLASH_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[18e]"></a>SYS_Dormancy</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wakeuptask.o(i.SYS_Dormancy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYS_Dormancy &rArr; EXTIX_Init &rArr; ACCEXT_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_exit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Stopby
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[192]"></a>SYS_Process</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, wakeuptask.o(i.SYS_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SYS_Process &rArr; OUT_ENABLE &rArr; Adc_Init &rArr; DMA_Config &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_ENABLE
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_DISABLE
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8503
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8501
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RXclean
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Work
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Dormancy
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_MPU
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Astern_Ctrl
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_task
</UL>

<P><STRONG><a name="[195]"></a>SYS_Work</STRONG> (Thumb, 546 bytes, Stack size 8 bytes, wakeuptask.o(i.SYS_Work))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_Work &rArr; Rest_MPU &rArr; Data_read &rArr; AT24CXX_ReadOneByte &rArr; IIC1_Read_Byte &rArr; IIC1_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8003
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_MPU
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
</UL>

<P><STRONG><a name="[19d]"></a>Stm32_Clock_Init</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stm32_Clock_Init &rArr; MYRCC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>Sys_Soft_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(i.Sys_Soft_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD00
</UL>

<P><STRONG><a name="[18f]"></a>Sys_Stopby</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, sys.o(i.Sys_Stopby))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sys_Stopby
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Dormancy
</UL>

<P><STRONG><a name="[1a4]"></a>TEF6686_AMSeek</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, radio.o(i.TEF6686_AMSeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TEF6686_AMSeek
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FRQSet
</UL>

<P><STRONG><a name="[1a1]"></a>TEF6686_FMSeek</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, radio.o(i.TEF6686_FMSeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TEF6686_FMSeek &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FRQSet
</UL>

<P><STRONG><a name="[1a3]"></a>TEF6686_FRQSet</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, radio.o(i.TEF6686_FRQSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TEF6686_FRQSet &rArr; TEF6686_FMSeek &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FMSeek
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_AMSeek
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_TuneTo
</UL>

<P><STRONG><a name="[17f]"></a>TEF6686_Mute</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, radio.o(i.TEF6686_Mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TEF6686_Mute &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[180]"></a>TEF6686_Scan</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, radio.o(i.TEF6686_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TEF6686_Scan &rArr; TEF6686_TuneTo &rArr; TEF6686_FRQSet &rArr; TEF6686_FMSeek &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8301
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_TuneTo
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[17a]"></a>TEF6686_Start</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, radio.o(i.TEF6686_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TEF6686_Start &rArr; TEF6686_TuneTo &rArr; TEF6686_FRQSet &rArr; TEF6686_FMSeek &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_Patch_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_TuneTo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[17e]"></a>TEF6686_TuneTo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.TEF6686_TuneTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TEF6686_TuneTo &rArr; TEF6686_FRQSet &rArr; TEF6686_FMSeek &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FRQSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Scan
</UL>

<P><STRONG><a name="[17c]"></a>TEF6886_GetSta</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, radio.o(i.TEF6886_GetSta))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TEF6886_GetSta &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>TW2836_Adjust</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tw2836.o(i.TW2836_Adjust))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0680
</UL>

<P><STRONG><a name="[126]"></a>TX_BLUEinfo</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, cantask.o(i.TX_BLUEinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TX_BLUEinfo &rArr; CAN_Send_Msg &rArr; CAN_Tx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
</UL>

<P><STRONG><a name="[127]"></a>TX_PHONEinfo</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, cantask.o(i.TX_PHONEinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TX_PHONEinfo &rArr; CAN_Send_Msg &rArr; CAN_Tx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
</UL>

<P><STRONG><a name="[175]"></a>TX_Process</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, uartexp.o(i.TX_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TX_Process &rArr; KEY_Process &rArr; Test_keysend &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_TxBuff
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_task
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_task
</UL>

<P><STRONG><a name="[125]"></a>TX_RTCtime</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cantask.o(i.TX_RTCtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TX_RTCtime &rArr; CAN_Send_Msg &rArr; CAN_Tx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
</UL>

<P><STRONG><a name="[e7]"></a>TX_TaskADD</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, uartexp.o(i.TX_TaskADD))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FnCheckSun_load
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8680
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8100
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8503
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8501
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_800A
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8003
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8201
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8103
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8101
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8670
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8661
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8660
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8640
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8623
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8622
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8621
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8610
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8600
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8502
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8301
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8200
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_810A
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8108
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8105
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8102
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0500
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8104
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8005
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8000
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8651
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8650
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8631
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8630
</UL>

<P><STRONG><a name="[a2]"></a>TX_TaskCancel</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, uartexp.o(i.TX_TaskCancel))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0501
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_Process
</UL>

<P><STRONG><a name="[ba]"></a>TX_Vsorce</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cantask.o(i.TX_Vsorce))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TX_Vsorce &rArr; CAN_Send_Msg &rArr; CAN_Tx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_OFF2
</UL>

<P><STRONG><a name="[1aa]"></a>Test_CMD00</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMD00))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Test_CMD00 &rArr; Test_pc2mpu &rArr; CMD_8670 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Soft_Reset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD00_source
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1ac]"></a>Test_CMD00_source</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, testcmd.o(i.Test_CMD00_source))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD00
</UL>

<P><STRONG><a name="[1ae]"></a>Test_CMD01</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, testcmd.o(i.Test_CMD01))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Test_CMD01 &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b0]"></a>Test_CMD02</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, testcmd.o(i.Test_CMD02))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Test_CMD02 &rArr; Test_sendfrqcover &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_sendfrqcover
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_inquirtfrq
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RadioCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b4]"></a>Test_CMD03</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMD03))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Test_CMD03 &rArr; Test_pc2mpu &rArr; CMD_8670 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b5]"></a>Test_CMD04</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMD04))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Test_CMD04 &rArr; Test_pc2mpu &rArr; CMD_8670 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b6]"></a>Test_CMD07</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, testcmd.o(i.Test_CMD07))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Test_CMD07 &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b7]"></a>Test_CMD08</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMD08))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Test_CMD08 &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b8]"></a>Test_CMD09</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, testcmd.o(i.Test_CMD09))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Test_CMD09 &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b9]"></a>Test_CMD0A</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMD0A))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Test_CMD0A &rArr; Test_pc2mpu &rArr; CMD_8670 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1ba]"></a>Test_CMD0B</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMD0B))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Test_CMD0B &rArr; Test_pc2mpu &rArr; CMD_8670 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1bb]"></a>Test_CMD0C</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMD0C))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Test_CMD0C &rArr; Test_pc2mpu &rArr; CMD_8670 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1bc]"></a>Test_CMD0D</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMD0D))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Test_CMD0D &rArr; power_check &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1be]"></a>Test_CMDFC</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMDFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Test_CMDFC &rArr; DEBUG_Printf &rArr; batctrl_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_pc2mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1bf]"></a>Test_CMDProcess</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, testcmd.o(i.Test_CMDProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Test_CMDProcess &rArr; Test_CMD09 &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_sendProcess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SunCheck
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CmdGet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDFC
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0D
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0C
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0B
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0A
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD09
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD08
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD07
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD04
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD03
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD02
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD01
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD00
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_process
</UL>

<P><STRONG><a name="[1c1]"></a>Test_CmdGet</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, testcmd.o(i.Test_CmdGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Test_CmdGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1c4]"></a>Test_CmdSend</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, testcmd.o(i.Test_CmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Test_CmdSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_sendProcess
</UL>

<P><STRONG><a name="[1b1]"></a>Test_RadioCtrl</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, testcmd.o(i.Test_RadioCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD02
</UL>

<P><STRONG><a name="[1c6]"></a>Test_Receivebyte</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, testcmd.o(i.Test_Receivebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Test_Receivebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_wrie_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>Test_Sendbyte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, testcmd.o(i.Test_Sendbyte))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CmdSend
</UL>

<P><STRONG><a name="[1c2]"></a>Test_SunCheck</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, testcmd.o(i.Test_SunCheck))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b2]"></a>Test_inquirtfrq</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, testcmd.o(i.Test_inquirtfrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Test_inquirtfrq &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD02
</UL>

<P><STRONG><a name="[159]"></a>Test_keysend</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, testcmd.o(i.Test_keysend))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Test_keysend &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Process
</UL>

<P><STRONG><a name="[1ab]"></a>Test_pc2mpu</STRONG> (Thumb, 50 bytes, Stack size 136 bytes, testcmd.o(i.Test_pc2mpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Test_pc2mpu &rArr; CMD_8670 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8670
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDFC
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0D
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0C
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0B
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0A
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD09
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD08
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD04
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD03
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD01
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD00
</UL>

<P><STRONG><a name="[1c3]"></a>Test_read_buf</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, testcmd.o(i.Test_read_buf))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CmdGet
</UL>

<P><STRONG><a name="[1af]"></a>Test_respond</STRONG> (Thumb, 60 bytes, Stack size 264 bytes, testcmd.o(i.Test_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_sendcache
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_keysend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_sendfrqcover
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_inquirtfrq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD09
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD08
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD07
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD02
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD01
</UL>

<P><STRONG><a name="[1c0]"></a>Test_sendProcess</STRONG> (Thumb, 30 bytes, Stack size 136 bytes, testcmd.o(i.Test_sendProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Test_sendProcess &rArr; Test_CmdSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CmdSend
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_sendcache
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
</UL>

<P><STRONG><a name="[1b3]"></a>Test_sendfrqcover</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, testcmd.o(i.Test_sendfrqcover))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Test_sendfrqcover &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD02
</UL>

<P><STRONG><a name="[1c7]"></a>Test_wrie_buf</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, testcmd.o(i.Test_wrie_buf))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Receivebyte
</UL>

<P><STRONG><a name="[214]"></a>Tick_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, delay.o(i.Tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>TimersCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, softimers.o(i.TimersCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TimersCreate &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1cc]"></a>UART_explain</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, uartexp.o(i.UART_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = UART_explain &rArr; factorymode_explain &rArr; CMD_0670 &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cl_mpudtc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8502
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_Process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_explain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorymode_explain
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_explain
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_explain
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_explain
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_explain
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro_explain
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_Load
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_process
</UL>

<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART1_IRQHandler &rArr; Test_Receivebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Receivebyte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usart.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 36 bytes, can.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CAN_Rx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Write_RXMsg
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>Uart2_TxBuff</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usart.o(i.Uart2_TxBuff))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_TX_Process
</UL>

<P><STRONG><a name="[1a8]"></a>Uart3_TxBuff</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usart.o(i.Uart3_TxBuff))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Process
</UL>

<P><STRONG><a name="[1d2]"></a>UdsInternal_CheckSessionTimeout</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pdu.o(i.UdsInternal_CheckSessionTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UdsInternal_CheckSessionTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Forward2Dsp
</UL>

<P><STRONG><a name="[1d3]"></a>UdsInternal_ClearDiagnosticInformation</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, pdu.o(i.UdsInternal_ClearDiagnosticInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UdsInternal_ClearDiagnosticInformation &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ClearDTC
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1d8]"></a>UdsInternal_CommunicationControl</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, pdu.o(i.UdsInternal_CommunicationControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UdsInternal_CommunicationControl &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CommunicationControl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1da]"></a>UdsInternal_ControlDTCSetting</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, pdu.o(i.UdsInternal_ControlDTCSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UdsInternal_ControlDTCSetting &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ControlDTCSetting
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpTxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1dc]"></a>UdsInternal_DiagnosticSessionControl</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, pdu.o(i.UdsInternal_DiagnosticSessionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UdsInternal_DiagnosticSessionControl &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_DiagnosticSessionControlPreCheck
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_DiagnosticSessionControl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpTxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1df]"></a>UdsInternal_ECUReset</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pdu.o(i.UdsInternal_ECUReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UdsInternal_ECUReset &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_EcuResetPreCheck
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_EcuReset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpTxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1e5]"></a>UdsInternal_InputOutputControlByIdentifier</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, pdu.o(i.UdsInternal_InputOutputControlByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UdsInternal_InputOutputControlByIdentifier &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_InputOutputControlByIdentifier
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1e2]"></a>UdsInternal_IsSidSessionValid</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, pdu.o(i.UdsInternal_IsSidSessionValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UdsInternal_IsSidSessionValid &rArr; Uds_GetServiceTable &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetServiceTable
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Forward2Dsp
</UL>

<P><STRONG><a name="[1ec]"></a>UdsInternal_ReadDTCInformation</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, pdu.o(i.UdsInternal_ReadDTCInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UdsInternal_ReadDTCInformation &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReportSupportedDTC
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReportNumberOfDTCByStatusMask
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReportDTCByStatusMask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1ea]"></a>UdsInternal_ReadDataByIdentifier</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, pdu.o(i.UdsInternal_ReadDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UdsInternal_ReadDataByIdentifier &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReadDataByIdentifier
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1ed]"></a>UdsInternal_RoutineControl</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, pdu.o(i.UdsInternal_RoutineControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UdsInternal_RoutineControl &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_RoutineControl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1e9]"></a>UdsInternal_SecurityAccess</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, pdu.o(i.UdsInternal_SecurityAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UdsInternal_SecurityAccess &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_RequestSeed
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CompareKey
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1e8]"></a>UdsInternal_TesterPresent</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, pdu.o(i.UdsInternal_TesterPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UdsInternal_TesterPresent &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_TesterPresent
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpTxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[1eb]"></a>UdsInternal_WriteDataByIdentifier</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, pdu.o(i.UdsInternal_WriteDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UdsInternal_WriteDataByIdentifier &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_WriteDataByIdentifier
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
</UL>

<P><STRONG><a name="[11e]"></a>Uds_CanTpProvideRxBuffer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pdu.o(i.Uds_CanTpProvideRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uds_CanTpProvideRxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Process
</UL>

<P><STRONG><a name="[11f]"></a>Uds_CanTpRxIndication</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pdu.o(i.Uds_CanTpRxIndication))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Process
</UL>

<P><STRONG><a name="[11c]"></a>Uds_CanTpTxConfirmation</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pdu.o(i.Uds_CanTpTxConfirmation))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_MainTask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_TesterPresent
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ECUReset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_DiagnosticSessionControl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ControlDTCSetting
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirmation
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Process
</UL>

<P><STRONG><a name="[1d6]"></a>Uds_ClearDTC</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uds_interface.o(i.Uds_ClearDTC))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ClearDiagnosticInformation
</UL>

<P><STRONG><a name="[1d9]"></a>Uds_CommunicationControl</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, uds_interface.o(i.Uds_CommunicationControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uds_CommunicationControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationType_Enable_Rx_Tx
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationType_Enable_Rx_Disable_Tx
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationType_Disable_Rx_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_CommunicationControl
</UL>

<P><STRONG><a name="[1f4]"></a>Uds_CompareKey</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, uds_interface.o(i.Uds_CompareKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uds_CompareKey &rArr; ComputeKey
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_SecurityAccess
</UL>

<P><STRONG><a name="[1db]"></a>Uds_ControlDTCSetting</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uds_interface.o(i.Uds_ControlDTCSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uds_ControlDTCSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_dtc_enable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_dtc_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ControlDTCSetting
</UL>

<P><STRONG><a name="[1de]"></a>Uds_DiagnosticSessionControl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uds_interface.o(i.Uds_DiagnosticSessionControl))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_DiagnosticSessionControl
</UL>

<P><STRONG><a name="[1dd]"></a>Uds_DiagnosticSessionControlPreCheck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uds_interface.o(i.Uds_DiagnosticSessionControlPreCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uds_DiagnosticSessionControlPreCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationType_Enable_Rx_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_DiagnosticSessionControl
</UL>

<P><STRONG><a name="[1e1]"></a>Uds_EcuReset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uds_interface.o(i.Uds_EcuReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uds_EcuReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ECUReset
</UL>

<P><STRONG><a name="[1e0]"></a>Uds_EcuResetPreCheck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uds_interface.o(i.Uds_EcuResetPreCheck))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ECUReset
</UL>

<P><STRONG><a name="[1e7]"></a>Uds_GetServiceTable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pdu.o(i.Uds_GetServiceTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Uds_GetServiceTable &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_IsSidSessionValid
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_IsSidValid
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_IsSidSecurityValid
</UL>

<P><STRONG><a name="[11b]"></a>Uds_GetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uds_interface.o(i.Uds_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_MainTask
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_RequestSeed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_CheckSessionTimeout
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirmation
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Process
</UL>

<P><STRONG><a name="[1fc]"></a>Uds_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pdu.o(i.Uds_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uds_Init &rArr; Buffer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[1e6]"></a>Uds_InputOutputControlByIdentifier</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uds_interface.o(i.Uds_InputOutputControlByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uds_InputOutputControlByIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_InputOutputControlByIdentifier
</UL>

<P><STRONG><a name="[1fd]"></a>Uds_MainTask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pdu.o(i.Uds_MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Uds_MainTask &rArr; DslInternal_Forward2Dsd &rArr; UdsInternal_Forward2Dsp &rArr; UdsInternal_Process &rArr; UdsInternal_SecurityAccess &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Forward2Dsd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[1f1]"></a>Uds_ReadDataByIdentifier</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, uds_interface.o(i.Uds_ReadDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uds_ReadDataByIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDataByIdentifier
</UL>

<P><STRONG><a name="[1fe]"></a>Uds_ReadDtcStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uds_interface.o(i.Uds_ReadDtcStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReportSupportedDTC
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReportNumberOfDTCByStatusMask
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReportDTCByStatusMask
</UL>

<P><STRONG><a name="[1ef]"></a>Uds_ReportDTCByStatusMask</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, uds_interface.o(i.Uds_ReportDTCByStatusMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uds_ReportDTCByStatusMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReadDtcStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDTCInformation
</UL>

<P><STRONG><a name="[1ee]"></a>Uds_ReportNumberOfDTCByStatusMask</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uds_interface.o(i.Uds_ReportNumberOfDTCByStatusMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uds_ReportNumberOfDTCByStatusMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReadDtcStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDTCInformation
</UL>

<P><STRONG><a name="[1f0]"></a>Uds_ReportSupportedDTC</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, uds_interface.o(i.Uds_ReportSupportedDTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uds_ReportSupportedDTC
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ReadDtcStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDTCInformation
</UL>

<P><STRONG><a name="[1f3]"></a>Uds_RequestSeed</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uds_interface.o(i.Uds_RequestSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Uds_RequestSeed
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_SecurityAccess
</UL>

<P><STRONG><a name="[1f2]"></a>Uds_RoutineControl</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, uds_interface.o(i.Uds_RoutineControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Uds_RoutineControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_RoutineControl
</UL>

<P><STRONG><a name="[1f5]"></a>Uds_TesterPresent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uds_interface.o(i.Uds_TesterPresent))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_TesterPresent
</UL>

<P><STRONG><a name="[24c]"></a>Uds_Tick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pdu.o(i.Uds_Tick))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[1f6]"></a>Uds_WriteDataByIdentifier</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, uds_interface.o(i.Uds_WriteDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uds_WriteDataByIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_F1A3_CONF_WRITE
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_F190_CONF_WRITE
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_F184_CONF_WRITE
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_3700_CONF_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_WriteDataByIdentifier
</UL>

<P><STRONG><a name="[1a0]"></a>WFI_SET</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.WFI_SET))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Stopby
</UL>

<P><STRONG><a name="[155]"></a>Writ_KEY</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.Writ_KEY))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Get
</UL>

<P><STRONG><a name="[d1]"></a>Write_car</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, inputscantask.o(i.Write_car))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
</UL>

<P><STRONG><a name="[f7]"></a>Write_sendcache</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, testcmd.o(i.Write_sendcache))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0670
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
</UL>

<P><STRONG><a name="[203]"></a>_HARDWARE_INT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hardware.o(i._HARDWARE_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _HARDWARE_INT &rArr; Adc_Init &rArr; DMA_Config &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Mode_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DID_VersionSet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[80]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[75]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[12f]"></a>batctrl_log</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wakeuptask.o(i.batctrl_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = batctrl_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>

<P><STRONG><a name="[165]"></a>cl_ladtc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, laroundexp.o(i.cl_ladtc))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_UART_explain
</UL>

<P><STRONG><a name="[1cd]"></a>cl_mpudtc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uartexp.o(i.cl_mpudtc))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[e9]"></a>cl_upcnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wakeuptask.o(i.cl_upcnt))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0501
</UL>

<P><STRONG><a name="[187]"></a>clean_TXtask</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uartexp.o(i.clean_TXtask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clean_TXtask
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_MPU
</UL>

<P><STRONG><a name="[157]"></a>clear_KEYvalue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.clear_KEYvalue))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Process
</UL>

<P><STRONG><a name="[130]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Mute
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_FRQSet
</UL>

<P><STRONG><a name="[e3]"></a>delay_task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uartexp.o(i.delay_task))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0202
</UL>

<P><STRONG><a name="[147]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Read_Byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_NAck
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Ack
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Wait_Ack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Read_Byte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_NAck
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Ack
</UL>

<P><STRONG><a name="[b2]"></a>delay_xms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_xms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_xms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Start
</UL>

<P><STRONG><a name="[1a5]"></a>devTEF665x_Patch_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, radio.o(i.devTEF665x_Patch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = devTEF665x_Patch_Init &rArr; devTEF665x_Patch_Load &rArr; devTEF665x_Write &rArr; I2C2_WriteData &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_WriteTab
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_Patch_Load
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEF6686_Start
</UL>

<P><STRONG><a name="[191]"></a>disable_exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, exti.o(i.disable_exit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Dormancy
</UL>

<P><STRONG><a name="[4d]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[17d]"></a>get_version</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, radio.o(i.get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = get_version &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
</UL>

<P><STRONG><a name="[16d]"></a>getbattervalue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, adc.o(i.getbattervalue))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
</UL>

<P><STRONG><a name="[15a]"></a>getchvalue</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, adc.o(i.getchvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getchvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SCAN
</UL>

<P><STRONG><a name="[db]"></a>lock_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uartexp.o(i.lock_check))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0101
</UL>

<P><STRONG><a name="[1a6]"></a>loop_task</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uartexp.o(i.loop_task))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Process
</UL>

<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, test.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPut_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPut_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[52]"></a>null</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uartexp.o(i.null))
<BR>[Address Reference Count : 1]<UL><LI> uartexp.o(i.TX_Process)
</UL>
<P><STRONG><a name="[1bd]"></a>power_check</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, testcmd.o(i.power_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = power_check &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_respond
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMD0D
</UL>

<P><STRONG><a name="[23e]"></a>pvPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[22c]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[54]"></a>start_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, test.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; TimersCreate &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_INT
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersCreate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.main)
</UL>
<P><STRONG><a name="[205]"></a>uart1_init</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, usart.o(i.uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart1_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
</UL>

<P><STRONG><a name="[245]"></a>uart2GetByte</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usart.o(i.uart2GetByte))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Process
</UL>

<P><STRONG><a name="[244]"></a>uart2Process</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, uarttask.o(i.uart2Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2Process
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2GetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_process
</UL>

<P><STRONG><a name="[206]"></a>uart2_init</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, usart.o(i.uart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
</UL>

<P><STRONG><a name="[247]"></a>uart3GetByte</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usart.o(i.uart3GetByte))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3Process
</UL>

<P><STRONG><a name="[246]"></a>uart3Process</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, uarttask.o(i.uart3Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart3Process
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3GetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_process
</UL>

<P><STRONG><a name="[207]"></a>uart3_init</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, usart.o(i.uart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart3_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HARDWARE_INT
</UL>

<P><STRONG><a name="[a9]"></a>uartTASK_Create</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, uarttask.o(i.uartTASK_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = uartTASK_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_INT
</UL>

<P><STRONG><a name="[248]"></a>uart_process</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uarttask.o(i.uart_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = uart_process &rArr; Test_CMDProcess &rArr; Test_CMD09 &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CMDProcess
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_UART_explain
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3Process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
</UL>

<P><STRONG><a name="[a5]"></a>udsTASK_Create</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, udstask.o(i.udsTASK_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = udsTASK_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_INT
</UL>

<P><STRONG><a name="[249]"></a>uds_dtc_check</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, dtc.o(i.uds_dtc_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uds_dtc_check &rArr; SaveHistoryDtc
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTC_Happen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryDtc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentDtc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[1fb]"></a>uds_dtc_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dtc.o(i.uds_dtc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ControlDTCSetting
</UL>

<P><STRONG><a name="[1fa]"></a>uds_dtc_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dtc.o(i.uds_dtc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ControlDTCSetting
</UL>

<P><STRONG><a name="[217]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[21f]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[22b]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[219]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[218]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[21b]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[21d]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[227]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[252]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[221]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[238]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[150]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_task
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Work
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_MPU
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_task
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutScan_task
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersCreate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[20b]"></a>vTaskDelayUntil</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_task
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[241]"></a>vTaskDelete</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[256]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[23d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[24f]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[24d]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[215]"></a>vTaskStartScheduler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[236]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[76]"></a>vTaskSwitchContext</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[a6]"></a>wakeupTASK_Create</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wakeuptask.o(i.wakeupTASK_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wakeupTASK_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_INT
</UL>

<P><STRONG><a name="[251]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[19f]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[220]"></a>xQueueGenericCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[229]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[255]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[258]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[234]"></a>xQueueReceive</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[257]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[119]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupTASK_Create
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udsTASK_Create
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTASK_Create
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTASK_Create
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutScanTASK_Create
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTASK_Create
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[19e]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ca]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_task
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersCreate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[254]"></a>xTaskIncrementTick</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[226]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[23c]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[237]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c9]"></a>xTimerCreate</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersCreate
</UL>

<P><STRONG><a name="[250]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1cb]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersCreate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[6a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
</UL>

<P><STRONG><a name="[25a]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
</UL>

<P><STRONG><a name="[25d]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
</UL>

<P><STRONG><a name="[260]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
</UL>

<P><STRONG><a name="[261]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
</UL>

<P><STRONG><a name="[2a6]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[16f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
</UL>

<P><STRONG><a name="[262]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[25c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[25f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2a7]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[263]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
</UL>

<P><STRONG><a name="[265]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[267]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[269]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[26a]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[2a9]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[26b]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[266]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[25b]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[26c]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[26e]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[60]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14b]"></a>InPutProcess</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, inputscantask.o(i.InPutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = InPutProcess &rArr; Radio_Process &rArr; TEF6686_Start &rArr; TEF6686_TuneTo &rArr; TEF6686_FRQSet &rArr; TEF6686_FMSeek &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Process
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPut_Scan
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Process
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GET
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CARInf_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutScan_task
</UL>

<P><STRONG><a name="[50]"></a>InPutScan_task</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inputscantask.o(i.InPutScan_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = InPutScan_task &rArr; InPutProcess &rArr; Radio_Process &rArr; TEF6686_Start &rArr; TEF6686_TuneTo &rArr; TEF6686_FRQSet &rArr; TEF6686_FMSeek &rArr; I2C2_ReadData &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutProcess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inputscantask.o(i.InPutScanTASK_Create)
</UL>
<P><STRONG><a name="[59]"></a>wakeup_task</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wakeuptask.o(i.wakeup_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wakeup_task &rArr; SYS_Process &rArr; OUT_ENABLE &rArr; Adc_Init &rArr; DMA_Config &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wakeuptask.o(i.wakeupTASK_Create)
</UL>
<P><STRONG><a name="[51]"></a>Process_task</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, uartexptask.o(i.Process_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Process_task &rArr; TX_Process &rArr; KEY_Process &rArr; Test_keysend &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Process
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_TX_Process
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_81
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8680
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8100
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartexptask.o(i.ProcessTASK_Create)
</UL>
<P><STRONG><a name="[56]"></a>uart_task</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uarttask.o(i.uart_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = uart_task &rArr; uart_process &rArr; Test_CMDProcess &rArr; Test_CMD09 &rArr; Test_respond &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init4
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarttask.o(i.uartTASK_Create)
</UL>
<P><STRONG><a name="[122]"></a>Can_Process</STRONG> (Thumb, 516 bytes, Stack size 8 bytes, cantask.o(i.Can_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Can_Process &rArr; CAN_EXP &rArr; CanIf_Received &rArr; CanTp_Process &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Get_TXMsg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Get_RXMsg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Vsorce
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_RTCtime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_PHONEinfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_BLUEinfo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_OFF2
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_task
</UL>

<P><STRONG><a name="[c2]"></a>CarSet_Get1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cantask.o(i.CarSet_Get1))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[c5]"></a>CarSet_Get2</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cantask.o(i.CarSet_Get2))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[c6]"></a>CarSet_Get3</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cantask.o(i.CarSet_Get3))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[c7]"></a>CarSet_Get4</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cantask.o(i.CarSet_Get4))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[c8]"></a>CarSet_Get5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cantask.o(i.CarSet_Get5))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[c4]"></a>KEYSTS_Get</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, cantask.o(i.KEYSTS_Get))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[c3]"></a>Power_Get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cantask.o(i.Power_Get))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[c0]"></a>Speed_Get</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cantask.o(i.Speed_Get))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[c1]"></a>TurnLight_Get</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, cantask.o(i.TurnLight_Get))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EXP
</UL>

<P><STRONG><a name="[4f]"></a>can_task</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cantask.o(i.can_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = can_task &rArr; Can_Process &rArr; CAN_EXP &rArr; CanIf_Received &rArr; CanTp_Process &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Process
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU2CAN_Process
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAULT_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cantask.o(i.CanTASK_Create)
</UL>
<P><STRONG><a name="[57]"></a>uds_task</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, udstask.o(i.uds_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = uds_task &rArr; Uds_MainTask &rArr; DslInternal_Forward2Dsd &rArr; UdsInternal_Forward2Dsp &rArr; UdsInternal_Process &rArr; UdsInternal_SecurityAccess &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_dtc_check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Tick
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_MainTask
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_MainTask
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udstask.o(i.udsTASK_Create)
</UL>
<P><STRONG><a name="[9f]"></a>ACK_Load</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, uartexp.o(i.ACK_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACK_Load &rArr; ACK_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[19b]"></a>CMD_0000</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uartexp.o(i.CMD_0000))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_explain
</UL>

<P><STRONG><a name="[19c]"></a>CMD_0003</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uartexp.o(i.CMD_0003))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_explain
</UL>

<P><STRONG><a name="[d8]"></a>CMD_0006</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uartexp.o(i.CMD_0006))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CMD_0006 &rArr; RTC_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_explain
</UL>

<P><STRONG><a name="[da]"></a>CMD_0101</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, uartexp.o(i.CMD_0101))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CMD_0101
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_check
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_explain
</UL>

<P><STRONG><a name="[dc]"></a>CMD_0104</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uartexp.o(i.CMD_0104))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CMD_0104 &rArr; LA_CMD_82 &rArr; LA_TX_TaskADD &rArr; LA_CheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_CMD_82
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8104
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_explain
</UL>

<P><STRONG><a name="[de]"></a>CMD_0105</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uartexp.o(i.CMD_0105))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CMD_0105 &rArr; LowPow_warn &rArr; CMD_800A &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_warn
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8105
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_explain
</UL>

<P><STRONG><a name="[152]"></a>CMD_0107</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uartexp.o(i.CMD_0107))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_explain
</UL>

<P><STRONG><a name="[e1]"></a>CMD_0202</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, uartexp.o(i.CMD_0202))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CMD_0202 &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Write_TXMsg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_task
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSet_explain
</UL>

<P><STRONG><a name="[182]"></a>CMD_0301</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, uartexp.o(i.CMD_0301))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_explain
</UL>

<P><STRONG><a name="[e4]"></a>CMD_0302</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, uartexp.o(i.CMD_0302))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CMD_0302 &rArr; CMD_8301 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8301
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_explain
</UL>

<P><STRONG><a name="[183]"></a>CMD_0303</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, uartexp.o(i.CMD_0303))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_explain
</UL>

<P><STRONG><a name="[116]"></a>CMD_0401</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uartexp.o(i.CMD_0401))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro_explain
</UL>

<P><STRONG><a name="[117]"></a>CMD_0402</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, uartexp.o(i.CMD_0402))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_0402
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro_explain
</UL>

<P><STRONG><a name="[118]"></a>CMD_0403</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, uartexp.o(i.CMD_0403))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro_explain
</UL>

<P><STRONG><a name="[fa]"></a>CMD_8000</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, uartexp.o(i.CMD_8000))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CMD_8000 &rArr; CMD_8101 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8101
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_explain
</UL>

<P><STRONG><a name="[fe]"></a>CMD_8005</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8005))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8005 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_explain
</UL>

<P><STRONG><a name="[dd]"></a>CMD_8104</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartexp.o(i.CMD_8104))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMD_8104 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0104
</UL>

<P><STRONG><a name="[115]"></a>CanPro_explain</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, uartexp.o(i.CanPro_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanPro_explain &rArr; CMD_0402
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0403
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0402
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0401
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[128]"></a>CarSet_explain</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uartexp.o(i.CarSet_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CarSet_explain &rArr; CMD_0202 &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8201
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8200
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0202
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[1a9]"></a>FnCheckSun_load</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, uartexp.o(i.FnCheckSun_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FnCheckSun_load
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_TaskADD
</UL>

<P><STRONG><a name="[151]"></a>Info_explain</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, uartexp.o(i.Info_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Info_explain &rArr; CMD_0105 &rArr; LowPow_warn &rArr; CMD_800A &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_810A
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8108
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0107
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0105
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0104
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0101
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[181]"></a>Radio_explain</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, uartexp.o(i.Radio_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Radio_explain &rArr; CMD_0302 &rArr; CMD_8301 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0303
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0302
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0301
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[19a]"></a>Start_explain</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, uartexp.o(i.Start_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Start_explain &rArr; CMD_8000 &rArr; CMD_8101 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8005
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8000
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0006
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0003
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0000
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[1cf]"></a>factorymode_explain</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, uartexp.o(i.factorymode_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = factorymode_explain &rArr; CMD_0670 &rArr; Write_sendcache
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8661
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8660
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0680
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0670
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0650
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0640
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0630
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0620
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0610
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0600
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[1ce]"></a>up_explain</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uartexp.o(i.up_explain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = up_explain &rArr; CMD_0501 &rArr; IAP_write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0501
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_0500
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_explain
</UL>

<P><STRONG><a name="[166]"></a>LA_ACK_Load</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, laroundexp.o(i.LA_ACK_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LA_ACK_Load
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_UART_explain
</UL>

<P><STRONG><a name="[15d]"></a>LA_CMD_00</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, laroundexp.o(i.LA_CMD_00))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LA_CMD_00 &rArr; LA_TX_TaskADD &rArr; LA_CheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_TX_TaskADD
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_UART_explain
</UL>

<P><STRONG><a name="[15f]"></a>LA_CMD_03</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, laroundexp.o(i.LA_CMD_03))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LA_CMD_03 &rArr; CMD_8640 &rArr; TX_TaskADD &rArr; FnCheckSun_load
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_8640
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_UART_explain
</UL>

<P><STRONG><a name="[163]"></a>LA_CheckSun_load</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, laroundexp.o(i.LA_CheckSun_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LA_CheckSun_load
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LA_TX_TaskADD
</UL>

<P><STRONG><a name="[20e]"></a>devTEF665x_Patch_Load</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, radio.o(i.devTEF665x_Patch_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = devTEF665x_Patch_Load &rArr; devTEF665x_Write &rArr; I2C2_WriteData &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_Patch_Init
</UL>

<P><STRONG><a name="[20f]"></a>devTEF665x_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, radio.o(i.devTEF665x_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = devTEF665x_Write &rArr; I2C2_WriteData &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_WriteTab
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_Patch_Load
</UL>

<P><STRONG><a name="[20d]"></a>devTEF665x_WriteTab</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, radio.o(i.devTEF665x_WriteTab))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = devTEF665x_WriteTab &rArr; devTEF665x_Write &rArr; I2C2_WriteData &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTEF665x_Patch_Init
</UL>

<P><STRONG><a name="[224]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[225]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[228]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[22f]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[230]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[23b]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[216]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[21a]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[222]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUDS_IDLETask
</UL>

<P><STRONG><a name="[223]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[22a]"></a>prvInitialiseNewTask</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[21c]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[24e]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[58]"></a>prvUDS_IDLETask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvUDS_IDLETask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvUDS_IDLETask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[21e]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[23a]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[22d]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[22e]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[231]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[232]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[235]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[233]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[239]"></a>prvSwitchTimerLists</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[5a]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[55]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[23f]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[240]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[bb]"></a>Buffer_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pdu.o(i.Buffer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buffer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTxBuffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Init
</UL>

<P><STRONG><a name="[135]"></a>DslInternal_Forward2Dsd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pdu.o(i.DslInternal_Forward2Dsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DslInternal_Forward2Dsd &rArr; UdsInternal_Forward2Dsp &rArr; UdsInternal_Process &rArr; UdsInternal_SecurityAccess &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_IsSidValid
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Forward2Dsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_MainTask
</UL>

<P><STRONG><a name="[1d5]"></a>GetRxBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdu.o(i.GetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_WriteDataByIdentifier
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_TesterPresent
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_SecurityAccess
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_RoutineControl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDataByIdentifier
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDTCInformation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_InputOutputControlByIdentifier
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ECUReset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_DiagnosticSessionControl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ControlDTCSetting
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_CommunicationControl
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ClearDiagnosticInformation
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_IsSidSecurityValid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTpProvideRxBuffer
</UL>

<P><STRONG><a name="[1d4]"></a>GetTxBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdu.o(i.GetTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_WriteDataByIdentifier
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_TesterPresent
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_SecurityAccess
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_RoutineControl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDataByIdentifier
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDTCInformation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_InputOutputControlByIdentifier
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ECUReset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_DiagnosticSessionControl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ControlDTCSetting
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_CommunicationControl
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ClearDiagnosticInformation
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
</UL>

<P><STRONG><a name="[bc]"></a>InitRxBuffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pdu.o(i.InitRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
</UL>

<P><STRONG><a name="[bd]"></a>InitTxBuffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pdu.o(i.InitTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
</UL>

<P><STRONG><a name="[137]"></a>UdsInternal_Forward2Dsp</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pdu.o(i.UdsInternal_Forward2Dsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = UdsInternal_Forward2Dsp &rArr; UdsInternal_Process &rArr; UdsInternal_SecurityAccess &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_IsSidSessionValid
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_CheckSessionTimeout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Process
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_IsSidSecurityValid
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Forward2Dsd
</UL>

<P><STRONG><a name="[1e3]"></a>UdsInternal_IsSidSecurityValid</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, pdu.o(i.UdsInternal_IsSidSecurityValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UdsInternal_IsSidSecurityValid &rArr; Uds_GetServiceTable &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetServiceTable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Forward2Dsp
</UL>

<P><STRONG><a name="[136]"></a>UdsInternal_IsSidValid</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pdu.o(i.UdsInternal_IsSidValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UdsInternal_IsSidValid &rArr; Uds_GetServiceTable &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetServiceTable
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Forward2Dsd
</UL>

<P><STRONG><a name="[1e4]"></a>UdsInternal_Process</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, pdu.o(i.UdsInternal_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UdsInternal_Process &rArr; UdsInternal_SecurityAccess &rArr; Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_WriteDataByIdentifier
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_TesterPresent
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_SecurityAccess
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_RoutineControl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDataByIdentifier
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDTCInformation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_InputOutputControlByIdentifier
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ECUReset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_DiagnosticSessionControl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ControlDTCSetting
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_CommunicationControl
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ClearDiagnosticInformation
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Forward2Dsp
</UL>

<P><STRONG><a name="[1d7]"></a>UdsInternal_ProcessingDone</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pdu.o(i.UdsInternal_ProcessingDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_WriteDataByIdentifier
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_TesterPresent
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_SecurityAccess
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_RoutineControl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDataByIdentifier
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDTCInformation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_InputOutputControlByIdentifier
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ECUReset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_DiagnosticSessionControl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ControlDTCSetting
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_CommunicationControl
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ClearDiagnosticInformation
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_ErrorHandle
</UL>

<P><STRONG><a name="[138]"></a>Uds_ErrorHandle</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pdu.o(i.Uds_ErrorHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Uds_ErrorHandle &rArr; UdsInternal_ProcessingDone &rArr; CanTp_Transmit &rArr; CanIf_TxIndication &rArr; CanTp_TxConfirmation &rArr; Det_Report &rArr; CanIf_Transmit &rArr; Can_Write_TXMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ProcessingDone
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_WriteDataByIdentifier
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_TesterPresent
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_SecurityAccess
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_RoutineControl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDataByIdentifier
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ReadDTCInformation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_InputOutputControlByIdentifier
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ECUReset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_DiagnosticSessionControl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ControlDTCSetting
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_CommunicationControl
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_ClearDiagnosticInformation
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsInternal_Forward2Dsp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Forward2Dsd
</UL>

<P><STRONG><a name="[197]"></a>SaveCurrentDtc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dtc.o(i.SaveCurrentDtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SaveCurrentDtc
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSnapshot
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_dtc_check
</UL>

<P><STRONG><a name="[199]"></a>SaveEeprom</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dtc.o(i.SaveEeprom))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryDtc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentDtc
</UL>

<P><STRONG><a name="[132]"></a>SaveHistoryDtc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dtc.o(i.SaveHistoryDtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SaveHistoryDtc
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSnapshot
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_dtc_check
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTC_Clean
</UL>

<P><STRONG><a name="[198]"></a>SaveSnapshot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dtc.o(i.SaveSnapshot))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryDtc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentDtc
</UL>

<P><STRONG><a name="[264]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[25e]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[26d]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[268]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[86]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[4c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
